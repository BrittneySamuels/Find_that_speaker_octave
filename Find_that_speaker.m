% Get the file and play[y,fs]=wavread('result.wav');sound(y,fs,16);% fft and ifft on wav file and displays it - numbers#[Y1,fs] = wavread('Obama2.wav');#Yx = fft(Y1);#display (Yx);#Y2 = ifft(Yx);#wavwrite (Y2, fs, 'Obama2ifft.wav');#[y,fs]=wavread('Obama2ifft.wav');#sound(y,fs,16);#plot(abs(Yx)); #- ignore% fft on wav file and displays it - graph magnitude and phase% The spikes in magnitude correspond to the signal's frequency components.#[y,fs] = wavread('Obama2.wav');#ydft = fft(y);% I'll assume y has even length#ydft = ydft(1:length(y)/2+1);% create a frequency vector#freq = 0:fs/length(y):fs/2;% plot magnitude#subplot(211);#plot(freq,abs(ydft));% plot phase#subplot(212);#plot(freq,unwrap(angle(ydft))); #xlabel('Hz');%%filter out everything that's below a certain threshold.%%Get the mean value and calculate a threshold[Y1,fs] = wavread('Obama2.wav');fft_values = fft(Y1);mean_value = mean(abs(fft_values));threshold  = 0.8*mean_value; % Fine-tune this%Remove everything that's below the threshold -we assume that it corresponds to noisefor i = 1:length(fft_values)    if abs(fft_values(i)) < threshold       fft_values(i) = 0;    end   enddisplay (fft_values);%Get the filtered samplesfiltered_samples = ifft(fft_values);wavwrite (filtered_samples, fs, 'Obama2ifftfilter.wav');[y,fs]=wavread('Obama2ifftfilter.wav');sound(y,fs,16);