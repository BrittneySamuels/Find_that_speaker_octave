%% Include voicebox file melcepst.m%melcepst;%% Include gmm library%gmmlibrart;%% Data Inputfs = 8000;training_data1 = wavread('1_train.wav');training_data2 = wavread('2_train.wav');training_data3 = wavread('3_train.wav');training_data4 = wavread('4_train.wav');training_data5 = wavread('5_train.wav');training_data6 = wavread('6_train.wav');training_data7 = wavread('7_train.wav');training_data8 = wavread('8_train.wav');training_data9 = wavread('9_train.wav');training_data10 = wavread('10_train.wav');testing_data1  = wavread('Obama2ifftfilter.wav');%testing_data2  = wavread('02_test.wav');%testing_data3  = wavread('03_test.wav');%% Feature Extraction (MFCCs)training_features1 = melcepst(training_data1, fs);training_features2 = melcepst(training_data2, fs);training_features3 = melcepst(training_data3, fs);training_features4 = melcepst(training_data4, fs);training_features5 = melcepst(training_data5, fs);training_features6 = melcepst(training_data6, fs);training_features7 = melcepst(training_data7, fs);training_features8 = melcepst(training_data8, fs);training_features9 = melcepst(training_data9, fs);training_features10 = melcepst(training_data10, fs);testing_features1  = melcepst(testing_data1, fs);%testing_features2  = melcepst(testing_data2, fs);%testing_features3  = melcepst(testing_data3, fs);%% Feature Matching (Minimum-Distance Classifier)delta = 0.85; % threshold for identificationmean_training_feature1 = mean(training_features1);mean_training_feature2 = mean(training_features2);mean_training_feature3 = mean(training_features3);mean_training_feature4 = mean(training_features4);mean_training_feature5 = mean(training_features5);mean_training_feature6 = mean(training_features6);mean_training_feature7 = mean(training_features7);mean_training_feature8 = mean(training_features8);mean_training_feature9 = mean(training_features9);mean_training_feature10 = mean(training_features10);mean_testing_feature1 = mean(testing_features1);%mean_testing_feature2 = mean(testing_features2);%mean_testing_feature3 = mean(testing_features3);d11 = mean((mean_training_feature1 - mean_testing_feature1).^2);d12 = mean((mean_training_feature2 - mean_testing_feature1).^2);d13 = mean((mean_training_feature3 - mean_testing_feature1).^2);d14 = mean((mean_training_feature4 - mean_testing_feature1).^2);d15 = mean((mean_training_feature5 - mean_testing_feature1).^2);d16 = mean((mean_training_feature6 - mean_testing_feature1).^2);d17 = mean((mean_training_feature7 - mean_testing_feature1).^2);d18 = mean((mean_training_feature8 - mean_testing_feature1).^2);d19 = mean((mean_training_feature9 - mean_testing_feature1).^2);d110 = mean((mean_training_feature10 - mean_testing_feature1).^2);%d21 = mean((mean_training_feature2 - mean_testing_feature1).^2);%d22 = mean((mean_training_feature2 - mean_testing_feature2).^2);%d23 = mean((mean_training_feature2 - mean_testing_feature3).^2);%d31 = mean((mean_training_feature3 - mean_testing_feature1).^2);%d32 = mean((mean_training_feature3 - mean_testing_feature2).^2);%d33 = mean((mean_training_feature3 - mean_testing_feature3).^2);check_identified(d11, delta, 'd11'); % false negativecheck_identified(d12, delta, 'd12'); % negativecheck_identified(d13, delta, 'd13'); % negativecheck_identified(d14, delta, 'd14'); % false negativecheck_identified(d15, delta, 'd15'); % negativecheck_identified(d16, delta, 'd16'); % negativecheck_identified(d17, delta, 'd17'); % false negativecheck_identified(d18, delta, 'd18'); % negativecheck_identified(d19, delta, 'd19'); % negativecheck_identified(d110, delta, 'd110'); % negative%check_identified(d21, delta, 'd21'); % negative%check_identified(d22, delta, 'd22'); % positive%check_identified(d23, delta, 'd23'); % false positive%check_identified(d31, delta, 'd31'); % negative%check_identified(d32, delta, 'd32'); % false positive%check_identified(d33, delta, 'd33'); % positive% 2/3 correctly identified% 1 false negative, 2 false positives%% Feature Matching (Gaussian Mixture Model)No_of_Clusters = 2;No_of_Iterations = 10;[training_idx1, training_mu1, training_sigma1] = GMM(training_features1', No_of_Clusters, No_of_Iterations);[training_idx2, training_mu2, training_sigma2] = GMM(training_features2', No_of_Clusters, No_of_Iterations);[training_idx3, training_mu3, training_sigma3] = GMM(training_features3', No_of_Clusters, No_of_Iterations);[training_idx4, training_mu4, training_sigma4] = GMM(training_features4', No_of_Clusters, No_of_Iterations);[training_idx5, training_mu5, training_sigma5] = GMM(training_features5', No_of_Clusters, No_of_Iterations);[training_idx6, training_mu6, training_sigma6] = GMM(training_features6', No_of_Clusters, No_of_Iterations);[training_idx7, training_mu7, training_sigma7] = GMM(training_features7', No_of_Clusters, No_of_Iterations);[training_idx8, training_mu8, training_sigma8] = GMM(training_features8', No_of_Clusters, No_of_Iterations);[training_idx9, training_mu9, training_sigma9] = GMM(training_features9', No_of_Clusters, No_of_Iterations);[training_idx10, training_mu10, training_sigma10] = GMM(training_features10', No_of_Clusters, No_of_Iterations);%%size(training_features1), size(training_features2), size(training_features3)size(training_features4), size(training_features5), size(training_features6)size(training_features7), size(training_features8), size(training_features9)size(training_features10)size(testing_features1)%size(testing_features2), size(testing_features3)size(training_mu1), size(training_mu2), size(training_mu3)size(training_mu4), size(training_mu5), size(training_mu6)size(training_mu7), size(training_mu8), size(training_mu9)size(training_mu10)[pc11, idx11] = Cluster_Probability(testing_features1', training_mu3)% [pc12, idx12] = Cluster_Probability(testing_features2, training_mu1)% [pc13, idx13] = Cluster_Probability(testing_features3, training_mu1)% % [pc21, idx21] = Cluster_Probability(testing_features1, training_mu2)% [pc22, idx22] = Cluster_Probability(testing_features2, training_mu2)% [pc23, idx23] = Cluster_Probability(testing_features3, training_mu2)% % [pc31, idx31] = Cluster_Probability(testing_features1, training_mu3)% [pc32, idx32] = Cluster_Probability(testing_features2, training_mu3)% [pc33, idx33] = Cluster_Probability(testing_features3, training_mu3)pc11Cluster_Probability(testing_features1', training_mu1)Cluster_Probability(testing_features1', training_mu2)log(Cluster_Probability(testing_features1', training_mu1)) - log(Cluster_Probability(testing_features1', background_mu))