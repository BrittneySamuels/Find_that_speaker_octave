%Co-variance Computation for a Clusterfunction [COVAR] = Cluster_Covariance(Data)[r,c] = size(Data);for i=1:r    COVAR(i) = var(Data(i,:));end;end;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%Co-variance Computation for a Clusterfunction [COVAR] = Cluster_Covariance(Data)[r,c] = size(Data);if(c>1)for i=1:r    COVAR(i) = var(Data(i,:));end;else    COVAR(1:r) = 1;end;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Function to compute the Cluster Probablityfunction [PC,INDEX] = Cluster_Probability(Data,Mu)[No_of_Features_within_Data,No_of_Data_Points] = size(Data);[No_of_Features_within_Mu,No_of_Mu_Points] = size(Mu);PC(1:No_of_Mu_Points) = 0;INDEX(1:No_of_Data_Points) = 0;Distance(1:No_of_Data_Points,1:No_of_Mu_Points) = 0.0;for i=1:No_of_Data_Points    for j = 1:No_of_Mu_Points        Distance(i,j) = sqrt(dot(Data(:,i)-Mu(:,j),Data(:,i)-Mu(:,j)));    endendfor i=1:No_of_Data_Points    [value,idx] = min(Distance(i,:));    PC(idx) = PC(idx)+1;    INDEX(i) = idx;endPC = PC/No_of_Data_Points;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%function mu = Compute_Mean_for_Cluster(X,Means,Variances,PC,Label_of_Cluster)[r,c] = size(X);mu = 0.0;Numerator = 0.0;Denominator = 0.0;for i=1:c    Numerator = Numerator+ Probability_of_Cluster_given_X(X(:,i),Means,Variances,PC,Label_of_Cluster)*X(:,i);    Denominator = Denominator + Probability_of_Cluster_given_X(X(:,i),Means,Variances,PC,Label_of_Cluster);end;mu = Numerator/Denominator;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Clustering by Gaussian Mixture Model% Author : T. N. Vikram% Place: International School of Information Management% Reference :  Algorithm Collections For Digital Signal Processing% Applications Using Matlab -  E.S. Gopi  , Kluwer 2007% Email: vikram@isim.ac.in% GMM Example% x1 = 10 + sqrt(3) * randn(5,3);% x2 = 20 + sqrt(5) * randn(5,3);% x3 = 25 + sqrt(2) * randn(5,3);% Input = [x1 x2 x3];% No_of_Clusters = 2;% No_of_Iterations = 5;% [INDEX,Mu, Variances] = GMM(Input, No_of_Clusters,No_of_Iterations);function [INDEX, Mu, Variances] = GMM(Input, No_of_Clusters,Limit)% Initialize_the_Cluster_Centroid[IDX, Initial_Centroids] = kmeans(Input',No_of_Clusters);Mu = Initial_Centroids';Limit = 10;for Iterations = 1:Limit[No_of_Features_within_Data,No_of_Data_Points] = size(Input);Probability_of_Cluster_given_Point(1:No_of_Clusters,1:No_of_Data_Points) = 0.0;[PC,INDEX] = Cluster_Probability(Input,Mu);%Initialize Cluster CovariancesCOVAR(1:No_of_Features_within_Data,1:No_of_Clusters) = 0.0;for i=1:No_of_Clusters   COVAR(:,i) = Cluster_Covariance(Input(:,IDX==i));end    %Initialize the probability matrix P(Cluster/Point)Variances = COVAR;for i=1:No_of_Clustersfor j=1:No_of_Data_PointsProbability_of_Cluster_given_Point(i,j) = Probability_of_Cluster_given_X(Input(:,j),Mu,Variances,PC,i);end;end;% New MeansMu1(1:No_of_Clusters,1:No_of_Features_within_Data) = 0.0;for i=1:No_of_ClustersMu1(i,:) = Compute_Mean_for_Cluster(Input,Mu,Variances,PC,i);end;%disp(Iterations);%disp(Mu1);Mu = Mu1';end;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%function MC = Mixing_Coefficient(X,MU,SIGMA)M = normpdf(X,MU,SIGMA);[r,c] = size(M);MC = 0.0;for i=1:c    MC = MC + M(i);endMC = MC/c;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%function PY = Probability_of_Cluster_given_X(X,Means,Variances,PC,Label_of_Cluster)PY = PC(Label_of_Cluster)*Mixing_Coefficient(X,Means(:,Label_of_Cluster), Variances(:,Label_of_Cluster));PY = PY/Probability_of_X(X,Means,Variances,PC);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%function PX = Probability_of_X(X,Means,Variances,PC)PX = 0.0;[r,c] = size(Means);for i=1:c    PX = PX + PC(i)*Mixing_Coefficient(X,Means(:,i), Variances(:,i));end;